<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                            http://www.springframework.org/schema/context    
                            http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                            http://www.springframework.org/schema/mvc    
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.core" />
	<!-- 引入连接数据库参数的配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/core/dao/*Mapper.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.core.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx 
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->

	<!-- 事务这块用spring管理atomikos -->
	<bean id="userTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown">
			<value>true</value>
		</property>
	</bean>
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="springTransactionManager"
		order="0" />




	<!-- 配置AOP -->
   <bean id="LogControllerAspect" class="com.core.comm.aop.LogControllerAspect">
	<property name="paras">
		<value>1</value>
	</property>
	<property name="results">
		<value>1</value>
	</property>
	<property name="openAspect">
		<value>1</value>
	</property>
   </bean>
   
   <bean id="LogServiceAspect" class="com.core.comm.aop.LogServiceAspect">
	<property name="paras">
		<value>1</value>
	</property>
	<property name="results">
		<value>1</value>
	</property>
	<property name="openAspect">
		<value>1</value>
	</property>
   </bean>
   
   <bean id="LogDaoAspect" class="com.core.comm.aop.LogDaoAspect">
	<property name="paras">
		<value>1</value>
	</property>
	<property name="results">
		<value>1</value>
	</property>
	<property name="openAspect">
		<value>1</value>
	</property>
   </bean>
   
    <aop:config>
        <!-- 配置切点表达式 -->
        <aop:pointcut expression="execution(public * com.core.controller..*.*(..))" id="pointcut0"/>
        <aop:pointcut expression="execution(public * com.core.dao..*.*(..)) &amp;&amp; !execution(public * com.core.dao.LogAspectDao.*(..))" id="pointcut2"/>
        <aop:pointcut expression="execution(public * com.core.service.impl.*.*(..))" id="pointcut1"/>
        <!-- 配置切面以及通知 -->
        <aop:aspect ref="LogControllerAspect" order="1">
            <!-- 前置通知 -->
            <aop:before method="beforeMethod" pointcut-ref="pointcut0"/>
            <!-- 后置通知 -->
            <aop:after method="afterMethod" pointcut-ref="pointcut0"/>
            <!-- 返回通知 -->
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut0" returning="result"/>
            <!-- 异常通知 -->
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut0" throwing="ex"/>
            <!-- 环绕通知 -->
            <aop:around method="around" pointcut-ref="pointcut0"/>
        </aop:aspect>
        <!-- 可以配置多个切面  service -->
        <aop:aspect ref="LogServiceAspect" order="2">
            <!-- 前置通知 -->
            <aop:before method="beforeMethod" pointcut-ref="pointcut1"/>
            <!-- 后置通知 -->
            <aop:after method="afterMethod" pointcut-ref="pointcut1"/>
            <!-- 返回通知 -->
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut1" returning="result"/>
            <!-- 异常通知 -->
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut1" throwing="ex"/>
            <!-- 环绕通知 -->
            <aop:around method="around" pointcut-ref="pointcut1"/>
        </aop:aspect>
        <!-- 可以配置多个切面   dao -->
        <aop:aspect ref="LogDaoAspect" order="3">
            <!-- 前置通知 -->
            <aop:before method="beforeMethod" pointcut-ref="pointcut2"/>
            <!-- 后置通知 -->
            <aop:after method="afterMethod" pointcut-ref="pointcut2"/>
            <!-- 返回通知 -->
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut2" returning="result"/>
            <!-- 异常通知 -->
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut2" throwing="ex"/>
            <!-- 环绕通知 -->
            <aop:around method="around" pointcut-ref="pointcut2"/>
        </aop:aspect>
    </aop:config>

</beans>  